{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","columns","setColumns","data","setData","errorFileFormat","setErrorFileFormat","hiddenFileInput","React","useRef","className","onClick","current","click","type","style","display","ref","accept","onChange","e","file","target","files","reader","FileReader","onload","evt","console","log","bstr","result","wb","XLSX","wsname","SheetNames","ws","Sheets","dataString","dataStringLines","split","headers","headersCheckLower","map","head","toLowerCase","includes","list","i","length","row","obj","j","d","substring","Object","values","filter","x","push","c","name","selector","processData","sheet_to_csv","header","readAsBinaryString","onerror","pagination","highlightOnHover","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAwHeA,MAnHf,WAAgB,IAAD,EAEiBC,mBAAS,IAF1B,mBAENC,EAFM,KAEGC,EAFH,OAGWF,mBAAS,IAHpB,mBAGNG,EAHM,KAGAC,EAHA,OAIiCJ,oBAAS,GAJ1C,mBAINK,EAJM,KAIWC,EAJX,KAiFPC,EAAkBC,IAAMC,OAAO,MAKrC,OACE,gCACE,wBAAQC,UAAU,aAAlB,SACE,8CAEF,qCACE,wBAAQC,QAVM,WAClBJ,EAAgBK,QAAQC,SASpB,0BAGA,uBACEC,KAAK,OACLC,MAAO,CAACC,QAAQ,QAChBC,IAAKV,EACLW,OAAO,OACPC,SA3CiB,SAAAC,GACvB,IAAMC,EAAOD,EAAEE,OAAOC,MAAM,GACtBC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACC,GAEbC,QAAQC,IAAI,MAGd,IAAMC,EAAOH,EAAIL,OAAOS,OAClBC,EAAKC,OAAUH,EAAM,CAAEhB,KAAM,WAE7BoB,EAASF,EAAGG,WAAW,GACvBC,EAAKJ,EAAGK,OAAOH,IA9DL,SAAAI,GAClB,IAAMC,EAAkBD,EAAWE,MAAM,WACnCC,EAAUF,EAAgB,GAAGC,MAAM,uCAEnCE,EAAoBD,EAAQE,KAAI,SAAAC,GAAI,OAAIA,EAAKC,iBAC/CH,EAAkBI,SAAS,UACxBJ,EAAkBI,SAAS,UAC3BJ,EAAkBI,SAAS,aAChCxC,GAAmB,IAEnBA,GAAmB,GACnBsB,QAAQC,IAAK,QAIf,IADA,IAAMkB,EAAO,GACJC,EAAI,EAAGA,EAAIT,EAAgBU,OAAQD,IAAK,CAC/C,IAAME,EAAMX,EAAgBS,GAAGR,MAAM,uCACrC,GAAIC,GAAWS,EAAID,SAAWR,EAAQQ,OAAQ,CAE5C,IADA,IAAME,EAAM,GACHC,EAAI,EAAGA,EAAIX,EAAQQ,OAAQG,IAAK,CACvC,IAAIC,EAAIH,EAAIE,GACRC,EAAEJ,OAAS,IACA,MAATI,EAAE,KACJA,EAAIA,EAAEC,UAAU,EAAGD,EAAEJ,OAAS,IACR,MAApBI,EAAEA,EAAEJ,OAAS,KACfI,EAAIA,EAAEC,UAAUD,EAAEJ,OAAS,EAAG,KAE9BR,EAAQW,KACVD,EAAIV,EAAQW,IAAMC,GAKlBE,OAAOC,OAAOL,GAAKM,QAAO,SAAAC,GAAC,OAAIA,KAAGT,OAAS,GAC7CF,EAAKY,KAAKR,IAMhB,IAAMlD,EAAUwC,EAAQE,KAAI,SAAAiB,GAAC,MAAK,CAChCC,KAAMD,EACNE,SAAUF,MAGZxD,EAAQ2C,GACR7C,EAAWD,GAmBT8D,CADa9B,QAAW+B,aAAa5B,EAAI,CAAE6B,OAAQ,MAGrDzC,EAAO0C,mBAAmB7C,GAE1BG,EAAO2C,QAAU,WACfvC,QAAQC,IAAI,gBA0BXxB,EAAkB,6BACjB,cAAC,IAAD,CACE+D,YAAU,EACVC,kBAAgB,EAChBpE,QAASA,EACTE,KAAMA,QCrGDmE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ccdfea3c.chunk.js","sourcesContent":["import './App.css';\nimport React, { useState } from 'react';\nimport * as XLSX from 'xlsx';\nimport DataTable from 'react-data-table-component';\n \nfunction App() {\n \n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  const [errorFileFormat, setErrorFileFormat] = useState(false);\n \n  // process CSV data\n  const processData = dataString => {\n    const dataStringLines = dataString.split(/\\r\\n|\\n/);\n    const headers = dataStringLines[0].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n\n    const headersCheckLower = headers.map(head => head.toLowerCase());\n    if (headersCheckLower.includes('email') \n        && headersCheckLower.includes('phone')\n        && headersCheckLower.includes('full name')){\n      setErrorFileFormat(false)\n    } else {\n      setErrorFileFormat(true)\n      console.log ('bad');\n    }\n \n    const list = [];\n    for (let i = 1; i < dataStringLines.length; i++) {\n      const row = dataStringLines[i].split(/,(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/);\n      if (headers && row.length === headers.length) {\n        const obj = {};\n        for (let j = 0; j < headers.length; j++) {\n          let d = row[j];\n          if (d.length > 0) {\n            if (d[0] === '\"')\n              d = d.substring(1, d.length - 1);\n            if (d[d.length - 1] === '\"')\n              d = d.substring(d.length - 2, 1);\n          }\n          if (headers[j]) {\n            obj[headers[j]] = d;\n          }\n        }\n \n        // remove the blank rows\n        if (Object.values(obj).filter(x => x).length > 0) {\n          list.push(obj);\n        }\n      }\n    }\n \n    // prepare columns list from headers\n    const columns = headers.map(c => ({\n      name: c,\n      selector: c,\n    }));\n \n    setData(list);\n    setColumns(columns);\n  }\n \n  // handle file upload\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (evt) => {\n\n        console.log(\"ok\");\n    \n      /* Parse data */\n      const bstr = evt.target.result;\n      const wb = XLSX.read(bstr, { type: 'binary' });\n      /* Get first worksheet */\n      const wsname = wb.SheetNames[0];\n      const ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n      const data = XLSX.utils.sheet_to_csv(ws, { header: 1 });\n      processData(data);\n    };\n    reader.readAsBinaryString(file);\n\n    reader.onerror = function() {\n      console.log('error');\n    };\n  }\n\n  const hiddenFileInput = React.useRef(null);\n  const handleClick = () => {\n    hiddenFileInput.current.click();\n  };\n\n  return (\n    <div>\n      <header className=\"App-header\">\n        <p> DataTable </p>\n      </header>\n      <>\n        <button onClick={handleClick}>\n          Import users\n        </button>\n        <input\n          type=\"file\"\n          style={{display:'none'}}\n          ref={hiddenFileInput}\n          accept=\".csv\"\n          onChange={handleFileUpload}\n        />\n      </>\n      {errorFileFormat ? 'File format is not correct': (\n        <DataTable\n          pagination\n          highlightOnHover\n          columns={columns}\n          data={data}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}