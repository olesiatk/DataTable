{"version":3,"sources":["components/DataTable.js","App.js","reportWebVitals.js","index.js"],"names":["DataTable","columns","data","className","map","header","index","title","rule","name","user","userData","i","classNames","validation","value","App","useState","setColumns","setData","errorFileFormat","setErrorFileFormat","processData","dataString","tableDataString","split","tableHead","unshift","push","headLowerCase","toLowerCase","includes","console","log","tableBody","slice","trim","usersDataWithCheckUnique","dataIndex","number","x10","Number","isInteger","length","checkNumber","age","isNaN","Math","round","toFixed","hasChildren","test","replace","state","toUpperCase","join","Date","parse","iDate","dublicateData","find","n","userDataCheck","headers","setRules","hiddenFileInput","React","useRef","onClick","current","click","type","style","display","ref","accept","onChange","e","file","target","files","reader","FileReader","readAsText","onload","result","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6707c2cd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './DataTable.css';\nimport classNames from 'classnames';\n\nexport const DataTable = ({columns, data}) => {\n  return (\n    <table className = 'table'>\n      <thead className = 'table__head'>\n        <tr>\n          {columns.map((header, index) => (\n              <th \n                key={index} \n                className = 'table__header table__cell'\n                title = {header.rule}\n              > \n                {header.name} \n              </th>\n          ))}\n        </tr>\n      </thead>\n      <tbody className = 'table__body'>\n        {data.map((user, index) => (\n          <tr key = {index}>\n            {user.map((userData, i) => (\n              <td \n                key={i}\n                className = {classNames(\n                  'table__cell', {\n                    'table__cell-invalid': !userData.validation\n                  }\n                )}\n              >\n                {userData.value}\n              </td>\n            ))}\n          </tr>  \n        ))}\n      </tbody>\n    </table>\n  );\n}","import React, { useState } from 'react';\nimport './App.css';\nimport { DataTable } from './components/DataTable'\n \nfunction App() {\n \n  const [columns, setColumns] = useState([]);\n  const [data, setData] = useState([]);\n  const [errorFileFormat, setErrorFileFormat] = useState(false);\n \n  // process CSV data\n  const processData = dataString => {\n    const tableDataString = dataString.split(/\\r\\n|\\n/);\n    const tableHead = tableDataString[0].split(';'); \n    tableHead.unshift('ID');\n    tableHead.push('Dublicate with');\n\n    //\n    const headLowerCase = tableHead.map(header => header.toLowerCase());\n    if (headLowerCase.includes('email') \n        && headLowerCase.includes('phone')\n        && headLowerCase.includes('full name')){\n      setErrorFileFormat(false)\n    } else {\n      setErrorFileFormat(true)\n      console.log ('bad');\n    }\n\n    //set innitial dates\n    const tableBody = tableDataString.slice(1)\n      .map((user, i) => (`${i+1}; `+user+'; ').split(/;(?![^\"]*\"(?:(?:[^\"]*\"){2})*[^\"]*$)/)\n        .map((userData, index) => {\n          let userObj = {\n            name: tableHead[index],\n            value: userData.trim(),\n            validation: true,\n          }\n\n          //check validation\n\n          return userObj;\n        })\n      )\n        .slice(0,-1);\n\n    // functions for validation (start)\n    function checkNumber(number) {\n      let x10 = number.slice(-10);\n      if (!Number.isInteger(+x10)) {\n        return false;\n      }\n      if (number.length >12 || number.length<10) {\n        return false;\n      } \n      if (number.length === 12) {\n        x10 = number.slice(2);\n        if (number.slice(0,2) !== '+1') {\n          return false;\n        }\n      }\n      if (number.length === 11) {\n        x10 = number.slice(2);\n        if (number.slice(0,1) !== '1') {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    function checkAge(age) {\n      if (age < 21 || !Number.isInteger(+age)) {\n        return false;\n      }\n      return true;\n    }\n\n    function checkHasChildren(hasChildren) {\n      return (hasChildren.toLowerCase() ==='true'\n              || hasChildren.toLowerCase() ==='false'\n              || hasChildren ===''\n            ) \n              ? true\n              : false;\n    }\n    // end functions for validation\n\n\n    // set date with check validation\n    const usersData = tableBody.map((user, i) => user.map((userData, dataIndex) => {\n      switch (userData.name.toLowerCase()) {\n        case ('phone'):\n          userData.validation = checkNumber(userData.value);\n          if (userData.validation && userData.value.length===10){\n            userData.value = '+1' + userData.value;\n          }\n          if (userData.validation && userData.value.length===11){\n            userData.value = '+' + userData.value;\n          }\n          break;\n        case ('age'):\n          userData.validation = checkAge(userData.value);\n          break;\n        case ('experience'):\n          if (!Number.isInteger(+userData.value) \n              || userData.value < 0 \n              || userData.value > user[dataIndex-1].value\n            ) {\n            userData.validation = false;\n          }\n          break;\n        case ('yearly income'):\n          if (isNaN(+userData.value) || +userData.value > 1000000) {\n            userData.validation = false;\n          } else if (userData.value) {\n            userData.value = (Math.round(userData.value * 100)/100).toFixed(2);\n          }\n          break;\n        case ('has children'):\n          userData.validation = checkHasChildren(userData.value);\n          if (userData.value === '') {\n            userData.value = 'FALSE';\n          }\n          break;\n        case ('license states'):\n          // check if it isn't number\n          userData.validation = !/\\d/.test(userData.value);\n          if (userData.value) {\n            userData.value = userData.value.replace(',', '|').split('|').map(state => state.trim().slice(0,2).toUpperCase()).join(' | ');\n          }\n          break;\n        case ('expiration date'):\n          userData.validation = Date.parse(userData.value) \n            && new Date(userData.value)<=new Date()\n            && (userData.value.includes('/') || userData.value.includes('-'));\n          break;\n        case ('license number'):\n          userData.validation = userData.value.length === 6 && /^[a-zA-Z\\d]*$/.test(userData.value)\n          break;\n        default:\n          break;\n      }\n      return userData;\n    }));\n\n    // set data with check unique Phone and Email\n    const usersDataWithCheckUnique = usersData.map((user, i) => user.map((userData, iDate) => {\n      if (userData.name.toLowerCase() === 'phone') {\n        const dublicateData = tableBody\n          .find((user, n) => n !== i \n            && user\n              .find(userDataCheck => userDataCheck.name === userData.name \n                && userDataCheck.value === userData.value\n              )\n          );\n        if (dublicateData) {\n          user[user.length-1].value = dublicateData[0].value;\n          userData.validation = false;\n        }\n      }\n      if (userData.name.toLowerCase() === 'email') {\n        const dublicateData = tableBody\n          .find((user, n) => n !== i \n            && user\n              .find(userDataCheck => userDataCheck.name === userData.name \n                && userDataCheck.value.toLowerCase() === userData.value.toLowerCase()\n              )\n          );\n        if (dublicateData) {\n          user[user.length-1].value = dublicateData[0].value;\n          userData.validation = false;\n        }\n      }\n      return userData;\n    }));\n\n    // set headers\n    const headers = tableHead.map(header => ({\n      name: header.trim(),\n      rule: setRules(header)\n    }));\n\n    //function for define collumns rules\n    function setRules(header) {\n      switch (header.toLowerCase()) {\n        case ('phone'):\n          return 'should be unique and in format +1хххххххххх';\n        case ('email'):\n          return 'should be unique'\n        case ('age'):\n          return 'should be not less then 21'\n        case ('experience'):\n          return 'should be not more then age'\n        case ('yearly income'):\n          return 'should be integer or decimal and less 1000000'\n        case ('has children'):\n          return 'should be \"true\" or \"false\"'\n        case ('license states'):\n          return 'should be name of states (can be devide with \"|\")'\n        case ('expiration date'):\n          return 'should be in format YYYY-MM-DD or MM-DD-YYYY'\n        case ('license number'):\n          return 'should have 6 symbols (numbers or letters)'\n        case ('dublicate with'):\n            return 'phone or email this user is repeated with the current user'\n        default:\n            return '';\n      }\n    }\n\n    // set state\n    setData(usersDataWithCheckUnique);\n    setColumns(headers);\n  }\n \n  // handle file upload\n  const handleFileUpload = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    if (file) {\n      reader.readAsText(file);\n      reader.onload = () => {\n        processData(reader.result);\n      };\n    }\n  }\n\n  // function for change name of button\n  const hiddenFileInput = React.useRef(null);\n  const handleClick = () => {\n    hiddenFileInput.current.click();\n  };\n\n  // APP RETURN\n  return (\n    <div>\n      <header className=\"App-header\">\n        <p> DataTable </p>\n      </header>\n      <>\n        <button \n          className = 'App__button'\n          title = 'import data in csv format with headers \"full name\", \"phone\" and \"email\"' \n          onClick={handleClick}\n        >\n          Import users\n        </button>\n        <input\n          type=\"file\"\n          style={{display:'none'}}\n          ref={hiddenFileInput}\n          accept=\".csv\"\n          onChange={handleFileUpload}\n        />\n      </>\n      {errorFileFormat \n        ? (\n          <div className = \"App__message\">File format is not correct</div>\n        ): (\n          <DataTable \n            columns = {columns}\n            data = {data}\n          />\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}